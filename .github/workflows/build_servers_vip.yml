name: Compilar servidores em modo VIP
# build_servers_vip.yml

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    paths:
      # Sempre acione todas as ações do GitHub se uma ação ou algo relacionado à CI for alterado
      - '.github/workflows/**'
      - 'tools/ci/**'
      # Este workflow deve ser executado quando um arquivo em um diretório de código-fonte for modificado.
      - 'src/**'
      - '3rdparty/**'

jobs:
  build:
    # O GitHub Actions verifica por '[ci skip]', '[skip ci]', '[no ci]', '[skip actions]' ou '[actions skip]', mas não versões com hífen.
    # É uma verificação geral caso um Pull Request seja aberto e alguém esteja no modo automático.
    if: "!contains(github.event.head_commit.message, 'ci-skip')"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
          # O rótulo ubuntu-latest atualmente aponta para ubuntu-24.04.
          # Disponíveis: ubuntu-24.04, ubuntu-22.04
          os: [ubuntu-latest]
          # Versões mais antigas do GCC não estão disponíveis via listas padrão do repositório aptitude.
          gcc: ['11']
          # Executamos verificações de compilação para Renovação e Pré-Renovação
          mode: ['PRE', 'RE']

    steps:
      - uses: actions/checkout@v4

      # Um simples 'sim' e 'não' pode ser confuso, então usamos nomes para exibir no job atual e depois convertê-los para uso no compilador.
      - name: Definir variável - PRE
        if: ${{ matrix.mode == 'PRE' }} 
        run: |
          echo "PRERE=yes" >> $GITHUB_ENV
      - name: Definir variável - RE
        if: ${{ matrix.mode == 'RE' }} 
        run: |
          echo "PRERE=no" >> $GITHUB_ENV

      - name: Atualizar e instalar pacotes
        # Os runners Ubuntu já possuem a maioria dos pacotes que o rAthena requer para compilar.
        # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
        run: |
          sudo apt update
          sudo apt install zlib1g-dev libpcre3-dev gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}

      - name: Iniciar MySQL
        run: sudo systemctl start mysql.service

      - name: Configurar banco de dados e importar dados das tabelas
        run: ./tools/ci/sql.sh

      - name: Comando - configurar
        env:
            CONFIGURE_FLAGS: 'CC=gcc-${{ matrix.gcc }} CXX=g++-${{ matrix.gcc }} --enable-prere=${{ env.PRERE }} --enable-buildbot=yes --enable-vip=yes'
        run: ./configure $CONFIGURE_FLAGS
      
      - name: Comando - make clean
        run: make clean

      - name: Comando - make server
        run: make server

      - name: Executar uma vez - login-server
        run: ./login-server --run-once

      - name: Executar uma vez - char-server
        run: ./char-server --run-once

      - name: Executar uma vez - map-server
        run: ./map-server --run-once
